#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('casino.server:server');
var http = require('http');
var init = require('../game/init');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Setup socket.io 
 */

var io = require('socket.io')(server);


// io.on('connection', (socket) => {
//   console.log('Connected to root (/)');
// });

// io.set('origins', '*:*');

/**
 * Public Tables
 */
const tablesNSP = io.of('/tables');
var { tables, privates, idArray } = init(tablesNSP);
var { findEmptyTable } = require('../game/Manager.js');
var Player = require('../game/Player');

tablesNSP.on('connection', (socket) => {
  console.log('Connected - backend socket');
  socket.emit('connected');
  socket.on('connected', (msg) => {
    console.log(msg);
  })

  socket.on('JOIN_PUBLIC', (name) => {
    console.log(name + ' sent request');
    console.log('Looking for a table available');
    // find if a table is empty
    var table = findEmptyTable(tables, idArray);

    // if no empty table let client know
    if (table === null) {
      socket.emit('noTable');
      console.log('No Table found');
    }
    // if empty table found, join table's room
    else {
      socket.join(`table${table.getTableId()}`, () => {
        // table makes the new player and adds it to its
        let playerId = table.handleJoinEvent(name);
        console.log(`Successfully joined table ${table.getTableId()}`);
        // send initial to sender, including playerId
        socket.emit('init', {
          ...table.getStatus(),
          playerId
        });
        // send status to the rest
        table.emitStatus();
      })

      socket.on('BET', (payload) => {
        console.log('BET Event received');
        tables[payload.tableId].handleBetEvent(payload);
      })

      socket.on('HIT', (payload) => {
        console.log('HIT Event received');
        tables[payload.tableId].handleHitEvent(payload);
      })

      socket.on('STAY', (payload) => {
        console.log('STAY Event received');
        tables[payload.tableId].handleStayEvent(payload);
      })

      socket.on('LEAVE', (payload) => {
        console.log('LEAVE Event received');
        socket.leave(`table${payload.tableId}`);
        tables[payload.tableId].handleLeaveEvent(payload.playerId);
      })
    }
  })
})

/**
 * Private Tables
 */
const privateTables = io.of('/tables/private');

privateTables.on('connection', (socket) => {

})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
